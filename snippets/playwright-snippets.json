{
  "Print to Console": {
    "scope": "javascript,typescript",
    "prefix": "cl",
    "body": ["console.log(${1});"],
    "description": "Log output to the console"
  },
  "Playwright Describe": {
    "scope": "javascript,typescript",
    "prefix": "pwd",
    "body": ["test.describe('${1}', () => {${2}});"],
    "description": "Generate a Playwright describe function"
  },
  "Playwright Test": {
    "scope": "javascript,typescript",
    "prefix": "pwt",
    "body": [
      "test(",
      "    '${1}',",
      "    {tag:'@${2}'},",
      "    async ({ ${3} }) => {",
      "        await test.step('${4}', async () => {${5}});",
      "    }",
      ");"
    ],
    "description": "Generate a Playwright test function"
  },
  "Playwright Test Step": {
    "scope": "javascript,typescript",
    "prefix": "pwts",
    "body": ["await test.step('${1}', async () => {${2}});"],
    "description": "Generate a Playwright test step function"
  },
  "Expect toBeVisible": {
    "scope": "javascript,typescript",
    "prefix": "exv",
    "body": ["await expect(${1}).toBeVisible();"],
    "description": "Generate expect locator to be visible code"
  },
  "Expect toEqual": {
    "scope": "javascript,typescript",
    "prefix": "exe",
    "body": ["await expect(${1}).toEqual(${2});"],
    "description": "Generate expect recieved value to be equal to predefined value"
  },
  "Expect toHaveText": {
    "scope": "javascript,typescript",
    "prefix": "ext",
    "body": ["await expect(${1}).toHaveText(${2});"],
    "description": "Generate expect locator to have predefined text"
  },
  "API Request": {
    "scope": "javascript,typescript",
    "prefix": "req",
    "body": [
      "const { status, body } = await apiRequest<${1}>({method:'${2}',url: '${3}', baseUrl: ${4}, body: ${5}, headers: ${6}}); expect(status).toBe(${7});"
    ],
    "description": "Generate API request"
  },
  "API Route": {
    "scope": "javascript,typescript",
    "prefix": "rou",
    "body": [
      "await page.route(`${1}`, async (route) => {await route.fulfill({status: 200, contentType: 'application/json',body: JSON.stringify(${2})});});"
    ],
    "description": "Generate API route"
  },
  "Environment Variable": {
    "scope": "javascript,typescript",
    "prefix": "pr",
    "body": ["process.env.${1}"],
    "description": "Generate environment variable"
  },
  "Intercept API Response": {
    "scope": "javascript,typescript",
    "prefix": "int",
    "body": [
      "const interceptedResponse = await page.waitForResponse(`${${1}}${2}`); const interceptedResponseBody = await interceptedResponse.json(); const ${3} = interceptedResponseBody.${4};"
    ],
    "description": "Intercept API response"
  },
  "Class for Page Object Model": {
    "scope": "javascript,typescript",
    "prefix": "pom",
    "body": [
      "import { Page, Locator, expect } from '@playwright/test';",
      "/**",
      " * Esse é o objeto da página de ${1}.",
      " * @export",
      " * @class ${1}",
      " * @typedef {${1}}",
      " */",
      "export class ${1}{",
      "    constructor(private page: Page) {}",
      "",
      "    // ################## Elementos ##################",
      "    //  Textos",
      "",
      "    //  Botões",
      "",
      "    //  Inputs (texboxes, checkboxes, radiobuttons)",
      "",
      "    //  Selects",
      "",
      "    // ################## Métodos ##################",
      "}"
    ],
    "description": "Class for Page Object Model"
  },
  "Getter for Class": {
    "scope": "javascript,typescript",
    "prefix": "ge",
    "body": ["get ${1}(): Locator {", "  return this.page.${2};", "}"],
    "description": "get locator"
  },
  "Add POM fixture": {
    "scope": "javascript,typescript",
    "prefix": "aef",
    "body": [
      "${1}: async ({ page }, use) => {",
      "  await use(new ${2}(page));",
      " }"
    ],
    "description": "Add POM fixture"
  },
  "Get Element Role": {
    "scope": "javascript,typescript",
    "prefix": "getrole",
    "body": [
      "get ${1}(): Locator {",
      "  return this.page.getByRole('${2}', { name: '${3}' });",
      "}"
    ],
    "description": "Add POM fixture"
  },
  "Add POM method": {
    "scope": "javascript,typescript",
    "prefix": "met",
    "body": ["async ${1}(${2}:${3}): Promise<void>{", "  ${4}", "}"],
    "description": "Add POM fixture"
  },
  "New Test File": {
    "scope": "javascript,typescript",
    "prefix": "pwtestfile",
    "body": [
      "import { test, expect } from '../../../fixtures/pom/test-options';",
      "",
      "",
      "test.describe('${1}', () => {",
      "  test.beforeAll(async ({ }) => {",
      "    ",
      "  });",
      "    ",
      "  test.beforeEach(async ({ }) => {",
      "    ",
      "  });",
      "",
      "  test(",
      "    '${2}',",
      "    { tag: '@${3}' },",
      "    async ({ ${4} }) => {",
      "      await test.step('${5}', async () => {",
      "        ${6}",
      "      });",
      "    }",
      "  );",
      "});"
    ],
    "description": "Generate a new Playwright test file"
  }
}
